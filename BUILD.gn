
cflags = [
    "-fPIC",
    "-Wall",
    "-Wextra",
    "-Werror",
    "-O3",
]
cflags_c = [
    "-std=c99",
]
cflags_cc = [
    "-std=c++17",
]
if (include_symbols) {
    cflags += [ "-g" ]
}
if (debug_cxxstdlib) {
    cflags_cc += [ "-D_GLIBCXX_DEBUG" ]
}
ldflags = [
    "-Wl,--no-allow-shlib-undefined",
    "-Wl,--version-script=" + rebase_path("src/export.map", root_build_dir),
]

if (target_cpu == "arm") {
    ldflags += [
        "-static-libstdc++",
    ]
}

action("configure_duktape") {
    script = "tools/configure-duktape.py"
    args = [
        "--duktape", rebase_path("src/duktape/duktape-2.7.0", root_build_dir),
        "--outpath", rebase_path(target_gen_dir + "/duktape/", root_build_dir),
        "--option=-DDUK_USE_FASTINT",
        "--option=-DDUK_USE_JSON_STRINGIFY_FASTPATH",
        "--option=-DDUK_USE_JSON_QUOTESTRING_FASTPATH",
        "--option=-DDUK_USE_JSON_EATWHITE_FASTPATH",
        "--option=-DDUK_USE_VALSTACK_UNSAFE",
    ]
    outputs = [
        "$target_gen_dir/duktape/duktape.h",
        "$target_gen_dir/duktape/duktape.c",
        "$target_gen_dir/duktape/duk_config.h",
    ]
}

action("generate_font") {
    script = "tools/generate_font.py"
    args = [
        "--font=" + rebase_path("tools/fonts/saxmono/saxmono.ttf", root_build_dir),
        "--size=22",
        "--width=11",
        "--height=25",
        "--baseline=20",
        "-o", rebase_path(target_gen_dir + "/custom/font.js", root_build_dir),
    ]
    outputs = [
        "$target_gen_dir/custom/font.js"
    ]
}

action("babel") {
    script = "tools/babel.py"
    args = [
        "--config", rebase_path("//.babelrc", root_build_dir),
        "--inpath", rebase_path("data/PuzzleScript/src/js", root_build_dir),
        "--outpath", rebase_path(target_gen_dir + "/es5", root_build_dir),
    ]
    outputs = [
        "$target_gen_dir/es5/colors.js",
        "$target_gen_dir/es5/compiler.js",
        "$target_gen_dir/es5/debug.js",
        "$target_gen_dir/es5/debug_off.js",
        "$target_gen_dir/es5/engine.js",
        "$target_gen_dir/es5/font.js",
        "$target_gen_dir/es5/globalVariables.js",
        "$target_gen_dir/es5/graphics.js",
        "$target_gen_dir/es5/inputoutput.js",
        "$target_gen_dir/es5/parser.js",
        "$target_gen_dir/es5/riffwave.js",
        "$target_gen_dir/es5/rng.js",
        "$target_gen_dir/es5/sfxr.js",
        "$target_gen_dir/es5/storagewrapper.js",
    ]
}

action("babel_custom") {
    script = "tools/babel.py"
    args = [
        "--config", rebase_path("//.babelrc", root_build_dir),
        "--inpath", rebase_path("data/custom", root_build_dir),
        "--outpath", rebase_path(target_gen_dir + "/custom", root_build_dir),
    ]
    outputs = [
        "$target_gen_dir/custom/main.js",
        "$target_gen_dir/custom/overload.js",
        "$target_gen_dir/custom/postsetup.js",
        "$target_gen_dir/custom/setup.js",
    ]
}

copy("demopz") {
    sources =[
        "//data/demo.pz",
    ]
    outputs = [
        "$target_gen_dir/demo.pz",
    ]
}

action("generate_internal_data") {
    script = "tools/bundle_files.py"
    deps = [ ":babel", ":babel_custom", ":generate_font", ":demopz" ]
    inputs = [
        "$target_gen_dir/demo.pz",
        "$target_gen_dir/custom/font.js",
        "$target_gen_dir/custom/main.js",
        "$target_gen_dir/custom/overload.js",
        "$target_gen_dir/custom/postsetup.js",
        "$target_gen_dir/custom/setup.js",
        "$target_gen_dir/es5/colors.js",
        "$target_gen_dir/es5/compiler.js",
        "$target_gen_dir/es5/debug.js",
        "$target_gen_dir/es5/debug_off.js",
        "$target_gen_dir/es5/engine.js",
        "$target_gen_dir/es5/font.js",
        "$target_gen_dir/es5/globalVariables.js",
        "$target_gen_dir/es5/graphics.js",
        "$target_gen_dir/es5/inputoutput.js",
        "$target_gen_dir/es5/parser.js",
        "$target_gen_dir/es5/riffwave.js",
        "$target_gen_dir/es5/rng.js",
        "$target_gen_dir/es5/sfxr.js",
        "$target_gen_dir/es5/storagewrapper.js",
    ]
    args = [
        "--out", rebase_path(target_gen_dir + "/bundled.h", root_build_dir),
    ] + rebase_path(inputs, root_build_dir)
    outputs = [ "$target_gen_dir/bundled.h" ]
}

shared_library("puzzlescript_libretro") {
    deps = [ ":configure_duktape" ]
    sources = [
        "src/core.cpp",
        "src/audio.cpp",
        "src/event.cpp",
        "src/generator.cpp",
        "src/graphics.cpp",
        "src/js.cpp",
        "src/rng.cpp",
        "src/sfxr.cpp",
        "src/sprite.cpp",
        "src/pztime.cpp",
        "src/stb/stb_image.cpp",
        "$target_gen_dir/duktape/duktape.c",
    ]
    include_dirs = [
        "src/duktape/duktape-2.7.0/src",
        "src/libretro",
        "src/stb",
        target_gen_dir
    ]
}
